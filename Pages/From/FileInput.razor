@page "/fileinput"
@using Microsoft.AspNetCore.Hosting
@using BlazorApp.Data

@inject IWebHostEnvironment env

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title font-weight-bold" id="exampleModalLabel">อัปโหลดเอกสาร</h5>
        <button type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"></button>
    </div>
    <div class="mb-3 px-md-2 mt-2">
        @*<label for="formFile" class="form-label">เลือกไฟล์ที่ต้องการ</label>*@
        <h5>เลือกไฟล์ที่ต้องการ</h5>
        @* รองรับ หากใส่ไป =>>> multiple*@
        <InputFile OnChange="OnInputFileChange" class="form-control" id="formFile" />
    </div>
    <div class="modal-footer">
        <button type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal">
            Close
        </button>
        <button type="button"
                class="btn btn-primary"
                data-bs-dismiss="modal"
                @onclick="OnSubmit">
            Upload
        </button>
    </div>
</div>

@code {
    IReadOnlyList<IBrowserFile> selectedFiles;
    [Parameter]
    public EventCallback<DTEventArgs> SetChildData { get; set; }

    public const string TEMP_DIR = "Temp";
    const int maxFileSize = 10485760 * 2; //20 MB

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
    }

    async Task OnSubmit()
    {
        //ModelApplyLoan = new ApplyLoanModel();
        //ModelApplyLoan.ImgUrl = new List<ApplyLoanModel.FileData>();
        if (selectedFiles != null)
        {
            foreach (var file in selectedFiles)
            {
                try
                {
                    if (file.Size <= maxFileSize)
                    {
                        var tempName = await CreateFileCombine(file);
                        var url = await SaveFile(file, tempName);

                        AddData(file.Name, url, tempName);

                        //ApplyLoanModel.FileData tmp = new ApplyLoanModel.FileData();
                        //tmp.Name = file.Name;
                        //tmp.NewName = url;
                        //ModelApplyLoan.ImgUrl.Add(tmp);

                        //ModelApplyLoan.ImgUrl.Add(new ApplyLoanModel.FileData() { Name = file.Name, NewName = url });
                        //foreach (var item in ModelApplyLoan.ImgUrl)
                        //{
                        //    Console.WriteLine(item);
                        //    Console.WriteLine(item.Name);
                        //    Console.WriteLine(item.NewName);
                        //}
                        //var name = await sessionStorage.GetItemAsync<string>("name");
                        //await sessionStorage.SetItemAsync("name", ModelApplyLoan.ImgUrl);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
            @*        testModelData test_22 = new testModelData() { LoanTypeID = 1, Guarantor = "new" };
                var test2 = $"/uploaddoc/{test_22}";
                NavigationManager.NavigateTo(test2);*@
        selectedFiles = null;
        this.StateHasChanged();
    }
    else
    {
        string alert = "กรูณาเลือกไฟล์";
        await JS.InvokeVoidAsync("displayTickerAlert", alert);
    }
}

public void AddData(string name, string url, string tempName)
{
    DTEventArgs arg = new DTEventArgs();
    arg.Params.Add(name);
    arg.Params.Add(url);
    arg.Params.Add(tempName);
    SetChildData.InvokeAsync(arg);
}

private async Task<string> CreateFileCombine(IBrowserFile file, string guid = null)
{
    var dirToSave = Path.Combine(env.WebRootPath, TEMP_DIR);
    var di = new DirectoryInfo(dirToSave);
    if (!di.Exists)
    {
        di.Create();
    }
    //var indexOfDot = file.Name.LastIndexOf(".");
    //var fileName = Guid.NewGuid().ToString() + file.Name.Substring(indexOfDot, file.Name.Length - indexOfDot);

    //var fileName = Guid.NewGuid().ToString() + GetFileExtension(file.Name);
    var fileName = Guid.NewGuid().ToString() + Path.GetExtension(file.Name);

    return fileName;
}

private async Task<string> SaveFile(IBrowserFile file, string fileName)
{
    var dirToSave = Path.Combine(env.WebRootPath, TEMP_DIR);
    var filePath = Path.Combine(dirToSave, fileName);

    using (var stream = file.OpenReadStream(maxFileSize))
    {
        using (var mstream = new MemoryStream())
        {
            using (Stream streamToWriteTo = File.Open(filePath, FileMode.Create))
            {
                await stream.CopyToAsync(streamToWriteTo);
            }
        }
    }
    return filePath;
}
}
